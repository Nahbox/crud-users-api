basePath: /
definitions:
  models.NewUser:
    properties:
      age:
        type: integer
      name:
        type: string
      occupation:
        type: string
      salary:
        type: integer
    type: object
  models.User:
    properties:
      age:
        type: integer
      id:
        type: integer
      name:
        type: string
      occupation:
        type: string
      salary:
        type: integer
    type: object
host: localhost:8080
info:
  contact: {}
  description: This API implements CRUD operations, providing versatile access to
    user data stored in a PostgreSQL database. Users can retrieve a list of users
    in various formats such as JSON, XML, and TOML. Additionally, the API supports
    the ability to delete and create individual user records, offering a comprehensive
    set of functionalities for managing user data seamlessly.
  title: Crud users API
  version: 0.0.1
paths:
  /users:
    get:
      consumes:
      - application/json
      description: Get a list of all users in the system
      operationId: get-all-users
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      summary: Get a list of all users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create a new user based on the provided JSON data
      operationId: create-user
      parameters:
      - description: User object to be created
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.NewUser'
      produces:
      - application/json
      responses:
        "200":
          description: Created user object
          schema:
            $ref: '#/definitions/models.User'
      summary: Create a new user
      tags:
      - Users
  /users/{user_id}:
    delete:
      consumes:
      - application/json
      description: Delete user based on the provided user ID
      operationId: delete-user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      summary: Delete user by ID
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Get user details based on the provided user ID
      operationId: get-user-by-id
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User details
          schema:
            $ref: '#/definitions/models.User'
      summary: Get user details by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update user details based on the provided user ID
      operationId: update-user-by-id
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - description: Updated user details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.NewUser'
      produces:
      - application/json
      responses:
        "200":
          description: Updated user details
          schema:
            $ref: '#/definitions/models.User'
      summary: Update user details by ID
      tags:
      - Users
swagger: "2.0"
